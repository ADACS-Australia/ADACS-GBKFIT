# -*- coding: utf-8 -*-
# Generated by Django 1.11.5 on 2017-10-17 04:46
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_countries.fields
import gbkfit_web.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('title', models.CharField(blank=True, choices=[('', ''), ('Mr', 'Mr'), ('Ms', 'Ms'), ('Mrs', 'Mrs'), ('Dr', 'Dr'), ('Prof', 'Prof'), ('A/Prof', 'A/Prof')], default='', max_length=10)),
                ('gender', models.CharField(blank=True, choices=[('', ''), ('Female', 'Female'), ('Male', 'Male')], default='', max_length=20)),
                ('is_student', models.BooleanField(default=False)),
                ('institution', models.CharField(max_length=100)),
                ('country', django_countries.fields.CountryField(max_length=2)),
                ('scientific_interests', models.TextField(blank=True, null=True, verbose_name='Scientific Interests')),
                ('status', models.CharField(choices=[('Unverified', 'Unverified'), ('Verified', 'Verified'), ('Confirmed', 'Confirmed'), ('Deleted', 'Deleted')], default='Unverified', max_length=10)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='DataModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dmodel_type', models.CharField(choices=[('scube_omp', 'scube_omp'), ('scube_cuda', 'scube_cuda'), ('mmaps_omp', 'mmaps_omp'), ('mmaps_cuda', 'mmaps_cuda')], default='scube_omp', max_length=10)),
                ('method', models.CharField(choices=[('moments', 'moments'), ('gauss', 'gauss')], default='moments', max_length=10)),
                ('scale_x', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)])),
                ('scale_y', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)])),
                ('scale_z', models.PositiveIntegerField(blank=True, default=1, validators=[django.core.validators.MinValueValidator(1)])),
                ('step_x', models.FloatField(default=1.0, validators=[django.core.validators.MinValueValidator(1.0)])),
                ('step_y', models.FloatField(default=1.0, validators=[django.core.validators.MinValueValidator(1.0)])),
                ('step_z', models.FloatField(blank=True, default=1.0, validators=[django.core.validators.MinValueValidator(1.0)])),
                ('creation_time', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='DataSet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dataset1_type', models.CharField(choices=[('flxmap', 'Flux map'), ('velmap', 'Velocity map'), ('sigmap', 'Velocity dispersion map'), ('flxcube', 'Spectral cubes')], default='velmap', max_length=10)),
                ('datafile1', models.FileField(upload_to=gbkfit_web.models.user_job_datafile_directory_path)),
                ('errorfile1', models.FileField(blank=True, null=True, upload_to=gbkfit_web.models.user_job_errorfile_directory_path)),
                ('maskfile1', models.FileField(blank=True, null=True, upload_to=gbkfit_web.models.user_job_maskfile_directory_path)),
                ('dataset2_type', models.CharField(choices=[('flxmap', 'Flux map'), ('velmap', 'Velocity map'), ('sigmap', 'Velocity dispersion map'), ('flxcube', 'Spectral cubes')], default='sigmap', max_length=10)),
                ('datafile2', models.FileField(blank=True, null=True, upload_to=gbkfit_web.models.user_job_datafile_directory_path)),
                ('errorfile2', models.FileField(blank=True, null=True, upload_to=gbkfit_web.models.user_job_errorfile_directory_path)),
                ('maskfile2', models.FileField(blank=True, null=True, upload_to=gbkfit_web.models.user_job_maskfile_directory_path)),
                ('creation_time', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Fitter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fitter_type', models.CharField(choices=[('mpfit', 'mpfit'), ('multinest', 'multinest')], default='mpfit', max_length=10)),
                ('ftol', models.FloatField(blank=True, default=1, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('xtol', models.FloatField(blank=True, default=1, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('gtol', models.FloatField(blank=True, default=1, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('epsfcn', models.FloatField(blank=True, default=1, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('stepfactor', models.FloatField(blank=True, default=1, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('covtol', models.FloatField(blank=True, default=1, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('mpfit_maxiter', models.PositiveIntegerField(blank=True, default=1)),
                ('maxfev', models.PositiveIntegerField(blank=True, default=1)),
                ('nprint', models.PositiveIntegerField(blank=True, default=0, validators=[django.core.validators.MaxValueValidator(1)])),
                ('douserscale', models.PositiveIntegerField(blank=True, default=0, validators=[django.core.validators.MaxValueValidator(1)])),
                ('nofinitecheck', models.PositiveIntegerField(blank=True, default=0, validators=[django.core.validators.MaxValueValidator(1)])),
                ('_is', models.PositiveIntegerField(blank=True, default=0, validators=[django.core.validators.MaxValueValidator(1)])),
                ('mmodal', models.PositiveIntegerField(blank=True, default=0, validators=[django.core.validators.MaxValueValidator(1)])),
                ('nlive', models.PositiveIntegerField(blank=True, default=1, validators=[django.core.validators.MinValueValidator(1)])),
                ('tol', models.FloatField(blank=True, default=1.0, validators=[django.core.validators.MinValueValidator(1e-06)])),
                ('efr', models.FloatField(blank=True, default=1.0, validators=[django.core.validators.MinValueValidator(1e-06)])),
                ('ceff', models.PositiveIntegerField(blank=True, default=0, validators=[django.core.validators.MaxValueValidator(1)])),
                ('ztol', models.FloatField(blank=True, default=1.0, validators=[django.core.validators.MinValueValidator(1e-06)])),
                ('logzero', models.FloatField(blank=True, default=1, validators=[django.core.validators.MinValueValidator(1e-06)])),
                ('multinest_maxiter', models.IntegerField(blank=True, default=-1)),
                ('seed', models.IntegerField(blank=True, default=1)),
                ('outfile', models.PositiveIntegerField(blank=True, default=0, validators=[django.core.validators.MaxValueValidator(1)])),
                ('creation_time', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='GalaxyModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gmodel_type', models.CharField(choices=[('thindisk_omp', 'thindisk_omp'), ('thindisk_cuda', 'thindisk_cuda')], default='thindisk_omp', max_length=12)),
                ('flx_profile', models.CharField(choices=[('exponential', 'exponential')], default='exponential', max_length=11)),
                ('vel_profile', models.CharField(choices=[('exponential', 'exponential'), ('flat', 'flat'), ('boissier', 'boissier'), ('arctan', 'arctan'), ('epinat', 'epinat')], default='exponential', max_length=11)),
                ('creation_time', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Job',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('status', models.CharField(choices=[('Draft', 'Draft'), ('Submitted', 'Submitted'), ('Queued', 'Queued'), ('In Progress', 'In Progress'), ('Completed', 'Completed'), ('Error', 'Error'), ('Saved', 'Saved'), ('Wall Time Exceeded', 'Wall Time Exceeded'), ('Deleted', 'Deleted')], default='Draft', max_length=20)),
                ('creation_time', models.DateTimeField(auto_now_add=True)),
                ('submission_time', models.DateTimeField(null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_job', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='LSF',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lsf_type', models.CharField(choices=[('gaussian', 'gaussian'), ('moffat', 'moffat'), ('lorentzian', 'lorentzian')], default='gaussian', max_length=10)),
                ('fwhm', models.FloatField(default=1.0)),
                ('beta', models.FloatField(default=1.0)),
                ('creation_time', models.DateTimeField(auto_now_add=True)),
                ('job', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='job_lsf', to='gbkfit_web.Job')),
            ],
        ),
        migrations.CreateModel(
            name='ParameterSet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('i0_fixed', models.PositiveIntegerField(blank=True, default=0, validators=[django.core.validators.MaxValueValidator(1)])),
                ('i0_value', models.FloatField(blank=True, default=1)),
                ('i0_min', models.FloatField(blank=True, default=1)),
                ('i0_max', models.FloatField(blank=True, default=1)),
                ('i0_wrap', models.PositiveIntegerField(blank=True, default=0, validators=[django.core.validators.MaxValueValidator(1)])),
                ('i0_step', models.FloatField(blank=True, default=0.0)),
                ('i0_relstep', models.FloatField(blank=True, default=0.0)),
                ('i0_side', models.PositiveIntegerField(blank=True, default=0, validators=[django.core.validators.MaxValueValidator(3)])),
                ('r0_fixed', models.PositiveIntegerField(blank=True, default=0, validators=[django.core.validators.MaxValueValidator(1)])),
                ('r0_value', models.FloatField(blank=True, default=1)),
                ('r0_min', models.FloatField(blank=True, default=1)),
                ('r0_max', models.FloatField(blank=True, default=1)),
                ('r0_wrap', models.PositiveIntegerField(blank=True, default=0, validators=[django.core.validators.MaxValueValidator(1)])),
                ('r0_step', models.FloatField(blank=True, default=0.0)),
                ('r0_relstep', models.FloatField(blank=True, default=0.0)),
                ('r0_side', models.PositiveIntegerField(blank=True, default=0, validators=[django.core.validators.MaxValueValidator(3)])),
                ('xo_fixed', models.PositiveIntegerField(blank=True, default=0, validators=[django.core.validators.MaxValueValidator(1)])),
                ('xo_value', models.FloatField(blank=True, default=1)),
                ('xo_min', models.FloatField(blank=True, default=1)),
                ('xo_max', models.FloatField(blank=True, default=1)),
                ('xo_wrap', models.PositiveIntegerField(blank=True, default=0, validators=[django.core.validators.MaxValueValidator(1)])),
                ('xo_step', models.FloatField(blank=True, default=0.0)),
                ('xo_relstep', models.FloatField(blank=True, default=0.0)),
                ('xo_side', models.PositiveIntegerField(blank=True, default=0, validators=[django.core.validators.MaxValueValidator(3)])),
                ('yo_fixed', models.PositiveIntegerField(blank=True, default=0, validators=[django.core.validators.MaxValueValidator(1)])),
                ('yo_value', models.FloatField(blank=True, default=1)),
                ('yo_min', models.FloatField(blank=True, default=1)),
                ('yo_max', models.FloatField(blank=True, default=1)),
                ('yo_wrap', models.PositiveIntegerField(blank=True, default=0, validators=[django.core.validators.MaxValueValidator(1)])),
                ('yo_step', models.FloatField(blank=True, default=0.0)),
                ('yo_relstep', models.FloatField(blank=True, default=0.0)),
                ('yo_side', models.PositiveIntegerField(blank=True, default=0, validators=[django.core.validators.MaxValueValidator(3)])),
                ('pa_fixed', models.PositiveIntegerField(blank=True, default=0, validators=[django.core.validators.MaxValueValidator(1)])),
                ('pa_value', models.FloatField(blank=True, default=1)),
                ('pa_min', models.FloatField(blank=True, default=1)),
                ('pa_max', models.FloatField(blank=True, default=1)),
                ('pa_wrap', models.PositiveIntegerField(blank=True, default=0, validators=[django.core.validators.MaxValueValidator(1)])),
                ('pa_step', models.FloatField(blank=True, default=0.0)),
                ('pa_relstep', models.FloatField(blank=True, default=0.0)),
                ('pa_side', models.PositiveIntegerField(blank=True, default=0, validators=[django.core.validators.MaxValueValidator(3)])),
                ('incl_fixed', models.PositiveIntegerField(blank=True, default=0, validators=[django.core.validators.MaxValueValidator(1)])),
                ('incl_value', models.FloatField(blank=True, default=1)),
                ('incl_min', models.FloatField(blank=True, default=1)),
                ('incl_max', models.FloatField(blank=True, default=1)),
                ('incl_wrap', models.PositiveIntegerField(blank=True, default=0, validators=[django.core.validators.MaxValueValidator(1)])),
                ('incl_step', models.FloatField(blank=True, default=0.0)),
                ('incl_relstep', models.FloatField(blank=True, default=0.0)),
                ('incl_side', models.PositiveIntegerField(blank=True, default=0, validators=[django.core.validators.MaxValueValidator(3)])),
                ('rt_fixed', models.PositiveIntegerField(blank=True, default=0, validators=[django.core.validators.MaxValueValidator(1)])),
                ('rt_value', models.FloatField(blank=True, default=1)),
                ('rt_min', models.FloatField(blank=True, default=1)),
                ('rt_max', models.FloatField(blank=True, default=1)),
                ('rt_wrap', models.PositiveIntegerField(blank=True, default=0, validators=[django.core.validators.MaxValueValidator(1)])),
                ('rt_step', models.FloatField(blank=True, default=0.0)),
                ('rt_relstep', models.FloatField(blank=True, default=0.0)),
                ('rt_side', models.PositiveIntegerField(blank=True, default=0, validators=[django.core.validators.MaxValueValidator(3)])),
                ('vt_fixed', models.PositiveIntegerField(blank=True, default=0, validators=[django.core.validators.MaxValueValidator(1)])),
                ('vt_value', models.FloatField(blank=True, default=1)),
                ('vt_min', models.FloatField(blank=True, default=1)),
                ('vt_max', models.FloatField(blank=True, default=1)),
                ('vt_wrap', models.PositiveIntegerField(blank=True, default=0, validators=[django.core.validators.MaxValueValidator(1)])),
                ('vt_step', models.FloatField(blank=True, default=0.0)),
                ('vt_relstep', models.FloatField(blank=True, default=0.0)),
                ('vt_side', models.PositiveIntegerField(blank=True, default=0, validators=[django.core.validators.MaxValueValidator(3)])),
                ('vsys_fixed', models.PositiveIntegerField(blank=True, default=0, validators=[django.core.validators.MaxValueValidator(1)])),
                ('vsys_value', models.FloatField(blank=True, default=1)),
                ('vsys_min', models.FloatField(blank=True, default=1)),
                ('vsys_max', models.FloatField(blank=True, default=1)),
                ('vsys_wrap', models.PositiveIntegerField(blank=True, default=0, validators=[django.core.validators.MaxValueValidator(1)])),
                ('vsys_step', models.FloatField(blank=True, default=0.0)),
                ('vsys_relstep', models.FloatField(blank=True, default=0.0)),
                ('vsys_side', models.PositiveIntegerField(blank=True, default=0, validators=[django.core.validators.MaxValueValidator(3)])),
                ('vsig_fixed', models.PositiveIntegerField(blank=True, default=0, validators=[django.core.validators.MaxValueValidator(1)])),
                ('vsig_value', models.FloatField(blank=True, default=1)),
                ('vsig_min', models.FloatField(blank=True, default=1)),
                ('vsig_max', models.FloatField(blank=True, default=1)),
                ('vsig_wrap', models.PositiveIntegerField(blank=True, default=0, validators=[django.core.validators.MaxValueValidator(1)])),
                ('vsig_step', models.FloatField(blank=True, default=0.0)),
                ('vsig_relstep', models.FloatField(blank=True, default=0.0)),
                ('vsig_side', models.PositiveIntegerField(blank=True, default=0, validators=[django.core.validators.MaxValueValidator(3)])),
                ('creation_time', models.DateTimeField(auto_now_add=True)),
                ('job', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='job_parameter_set', to='gbkfit_web.Job')),
            ],
        ),
        migrations.CreateModel(
            name='PSF',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('psf_type', models.CharField(choices=[('gaussian', 'gaussian'), ('moffat', 'moffat'), ('lorentzian', 'lorentzian')], default='gaussian', max_length=10)),
                ('fwhm_x', models.FloatField(default=1.0)),
                ('fwhm_y', models.FloatField(default=1.0)),
                ('pa', models.IntegerField(default=1)),
                ('beta', models.FloatField(default=1.0)),
                ('creation_time', models.DateTimeField(auto_now_add=True)),
                ('job', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='job_psf', to='gbkfit_web.Job')),
            ],
        ),
        migrations.CreateModel(
            name='Verification',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('information', models.CharField(max_length=1024)),
                ('expiry', models.DateTimeField(null=True)),
                ('verified', models.BooleanField(default=False)),
            ],
        ),
        migrations.AddField(
            model_name='galaxymodel',
            name='job',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='job_gmodel', to='gbkfit_web.Job'),
        ),
        migrations.AddField(
            model_name='fitter',
            name='job',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='job_fitter', to='gbkfit_web.Job'),
        ),
        migrations.AddField(
            model_name='dataset',
            name='job',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='job_data_set', to='gbkfit_web.Job'),
        ),
        migrations.AddField(
            model_name='datamodel',
            name='job',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='job_data_model', to='gbkfit_web.Job'),
        ),
        migrations.AlterUniqueTogether(
            name='job',
            unique_together=set([('user', 'name')]),
        ),
    ]
